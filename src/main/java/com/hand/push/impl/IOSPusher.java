package com.hand.push.impl;import java.util.ArrayList;import java.util.List;import javapns.devices.Device;import javapns.devices.implementations.basic.BasicDevice;import javapns.notification.AppleNotificationServerBasicImpl;import javapns.notification.PushNotificationManager;import javapns.notification.PushNotificationPayload;import javapns.notification.PushedNotification;import org.springframework.util.StringUtils;import com.hand.push.core.Pusher;import com.hand.push.domain.UserPushToken;public class IOSPusher implements Pusher {	private List<UserPushToken> uts ;		@Override	public void putRecord(UserPushToken ut) {		// TODO Auto-generated method stub		String deviceToken = ut.getPushToken();        String alert = ut.getMessage();        int badge = 1;        String sound = "default";        List<String> tokens = new ArrayList<String>();        tokens.add(deviceToken);        String certificatePath = "D:/PushDev.p12";        String certificatePassword = "12345678";        boolean sendCount = true;        try        {            PushNotificationPayload payLoad = new PushNotificationPayload();            payLoad.addAlert(alert); // 消息内容            payLoad.addBadge(badge); // iphone应用图标上小红圈上的数值            if (!StringUtils.isEmpty(sound))            {                payLoad.addSound(sound);//铃音            }            PushNotificationManager pushManager = new PushNotificationManager();            //true：表示的是产品发布推送服务 false：表示的是产品测试推送服务            pushManager.initializeConnection(new AppleNotificationServerBasicImpl(certificatePath, certificatePassword, false));            List<PushedNotification> notifications = new ArrayList<PushedNotification>();            // 发送push消息            if (sendCount)            {                Device device = new BasicDevice();                device.setToken(tokens.get(0));                PushedNotification notification = pushManager.sendNotification(device, payLoad, true);                notifications.add(notification);            }            else            {                List<Device> device = new ArrayList<Device>();                for (String token : tokens)                {                    device.add(new BasicDevice(token));                }                notifications = pushManager.sendNotifications(payLoad, device);            }            List<PushedNotification> failedNotifications = PushedNotification.findFailedNotifications(notifications);            List<PushedNotification> successfulNotifications = PushedNotification.findSuccessfulNotifications(notifications);            int failed = failedNotifications.size();            int successful = successfulNotifications.size();            pushManager.stopConnection();        }        catch (Exception e)        {            e.printStackTrace();        }	}     @Override    public String tellMeYourDeviceType() {       return "iPhone";    }}