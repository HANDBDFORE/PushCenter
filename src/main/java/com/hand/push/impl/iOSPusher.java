package com.hand.push.impl;import com.hand.push.core.NodeResult;import com.hand.push.core.Pusher;import com.hand.push.core.annotation.Platform;import com.hand.push.dto.PushEntry;import javapns.devices.Device;import javapns.devices.implementations.basic.BasicDevice;import javapns.notification.AppleNotificationServerBasicImpl;import javapns.notification.PushNotificationManager;import javapns.notification.PushNotificationPayload;import javapns.notification.PushedNotification;import org.springframework.util.StringUtils;import java.net.URL;import java.util.ArrayList;import java.util.List;@Platform(platformName = "iPhone")public final class iOSPusher implements Pusher {    private final String certificatePath;    private final String certificatePassword;    public iOSPusher(String certificatePath, String certificatePassword) {        check(certificatePath, certificatePassword);        this.certificatePath = certificatePath;        this.certificatePassword = certificatePassword;    }    private void check(String certificatePath, String certificatePassword) {        if (certificatePath == null) throw new IllegalArgumentException("iOSPusher 的 certificatePath 属性必须赋值");        if (certificatePassword == null) throw new IllegalArgumentException("iOSPusher 的 certificatePassword 属性必须赋值");    }    @Override    public String tellMeYourDeviceType() {        return "iphone";    }    @Override    public NodeResult push(List<PushEntry> pushRequests) {        NodeResult result = new NodeResult();        for (PushEntry pushRequest : pushRequests) {            try {                this.putRecord(pushRequest);            } catch (Exception e) {                //TODO 记录日志                e.printStackTrace();                result.addError(e.getMessage(), pushRequest);            }        }        return result;    }    private void putRecord(PushEntry ut) throws Exception {        String deviceToken = ut.getToken();        String alert = ut.getMessage();        int badge = ut.getCount();        String sound = "default";        List<String> tokens = new ArrayList<String>();        tokens.add(deviceToken);        URL classPath = iOSPusher.class.getClassLoader().getResource("");        String path = classPath.getPath();        path = path + certificatePath;        boolean sendCount = true;        PushNotificationPayload payLoad = new PushNotificationPayload();        payLoad.addAlert(alert); // 消息内容        payLoad.addBadge(badge); // iphone应用图标上小红圈上的数值        if (!StringUtils.isEmpty(sound)) {            payLoad.addSound(sound);// 铃音        }        PushNotificationManager pushManager = new PushNotificationManager();        // true：表示的是产品发布推送服务 false：表示的是产品测试推送服务        pushManager.initializeConnection(new AppleNotificationServerBasicImpl(path,                certificatePassword, false));        List<PushedNotification> notifications = new ArrayList<PushedNotification>();        // 发送push消息        if (sendCount) {            Device device = new BasicDevice();            device.setToken(tokens.get(0));            PushedNotification notification = pushManager.sendNotification(device, payLoad,                    true);            notifications.add(notification);        } else {            List<Device> device = new ArrayList<Device>();            for (String token : tokens) {                device.add(new BasicDevice(token));            }            notifications = pushManager.sendNotifications(payLoad, device);        }        List<PushedNotification> failedNotifications = PushedNotification                .findFailedNotifications(notifications);        List<PushedNotification> successfulNotifications = PushedNotification                .findSuccessfulNotifications(notifications);        int failed = failedNotifications.size();        int successful = successfulNotifications.size();        pushManager.stopConnection();    }    @Override    public String toString() {        return "iOSPusher{" +                "certificatePath='" + certificatePath + '\'' +                ", certificatePassword='" + certificatePassword + '\'' +                '}';    }}