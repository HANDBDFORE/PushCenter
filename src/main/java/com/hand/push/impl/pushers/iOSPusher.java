package com.hand.push.impl.pushers;import com.hand.push.core.PushFailureException;import com.hand.push.core.domain.Output;import com.hand.push.core.dto.PushEntry;import javapns.communication.exceptions.CommunicationException;import javapns.communication.exceptions.KeystoreException;import javapns.devices.Device;import javapns.devices.implementations.basic.BasicDevice;import javapns.notification.AppleNotificationServerBasicImpl;import javapns.notification.PushNotificationManager;import javapns.notification.PushNotificationPayload;import javapns.notification.PushedNotification;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.net.URL;import java.util.ArrayList;import java.util.List;public final class iOSPusher extends AbstractConcurrentPusher {    private final String sound ;    private final String certificatePath;    private final String certificatePassword;    private final boolean isProduct;   // true：表示的是产品发布推送服务 false：表示的是产品测试推送服务    public iOSPusher(String sound, String certificatePath, String certificatePassword, boolean isProduct,int coreWorkers, int maxWorkers, int queueCapacity) {        super(coreWorkers, maxWorkers, queueCapacity);        check(certificatePath, certificatePassword);        this.certificatePath = certificatePath;        this.certificatePassword = certificatePassword;        this.isProduct = isProduct;        this.sound = sound;        getLogger().debug("iOS Pusher inited, " + toString());    }    public iOSPusher(String certificatePath, String certificatePassword, boolean isProduct) throws CommunicationException, KeystoreException {        this(certificatePath, certificatePassword, isProduct,"default");    }    public iOSPusher(String certificatePath, String certificatePassword, boolean isProduct,String sound) throws CommunicationException, KeystoreException {         this(sound, certificatePath, certificatePassword, isProduct, CORE_WORKERS, MAX_WORKERS, QUEUE_CAPACITY);    }    private void check(String certificatePath, String certificatePassword) {        if (certificatePath == null) throw new IllegalArgumentException("iOSPusher 的 certificatePath 属性必须赋值");        if (certificatePassword == null) throw new IllegalArgumentException("iOSPusher 的 certificatePassword 属性必须赋值");    }    @Override    public String tellMeYourDeviceType() {        return "iphone";    }    @Override    protected Runnable getTask(final PushEntry entry, final Output output) throws PushFailureException {        final PushNotificationManager pushManager;        try {            pushManager = initPushManager();        } catch (Exception e) {            e.printStackTrace();            throw new PushFailureException(e);        }        return new Runnable() {            @Override            public void run() {                Logger logger = getLogger();                try {                    String alert = entry.getMessage();                    int badge = entry.getCount();                    PushNotificationPayload payLoad = new PushNotificationPayload(alert, badge, sound);                    // 发送push消息                    Device device = new BasicDevice();                    device.setToken(entry.getToken());                    PushedNotification notification = pushManager.sendNotification(device, payLoad, true);                    List<PushedNotification> notifications = new ArrayList<PushedNotification>();                    notifications.add(notification);                    List<PushedNotification> successfulNotifications = PushedNotification.findSuccessfulNotifications(notifications);                    for (PushedNotification successfulNotification : successfulNotifications) {                        logger.trace("success: " + entry);                        output.addSuccessEntry(entry);                    }                    List<PushedNotification> failedNotifications = PushedNotification.findFailedNotifications(notifications);                    for (PushedNotification failedNotification : failedNotifications) {                        logger.error("error! Caused by: " + failedNotification.getException() + ", data: " + entry);//                        pushResult.addError(failedNotification.getException().getMessage(), ut);                        output.addErrorEntry( entry,failedNotification.getException());                    }                } catch (CommunicationException e) {                    e.printStackTrace();                    //TODO 可以考虑转换为IOException，包装在结果里                    logger.error("error! Caused by: " + e);                    output.addErrorEntry( entry,e);                } catch (Exception e) {                    logger.error("error! Caused by: " + e);                    e.printStackTrace();                    output.addErrorEntry( entry,e);                }            }        };    }    private PushNotificationManager initPushManager() throws KeystoreException, CommunicationException {        URL classPath = getClass().getClassLoader().getResource("");        String path = classPath.getPath() + certificatePath;        getLogger().trace("init PushNotificationManager, certificatePath: " + path);        PushNotificationManager pushManager = new PushNotificationManager();        pushManager.initializeConnection(new AppleNotificationServerBasicImpl(path, certificatePassword, isProduct));        return pushManager;    }    @Override    protected void cleanUp() {    }    protected Logger getLogger() {        return LoggerFactory.getLogger(getClass());    }    @Override    public String toString() {        return "iOSPusher{" +                "certificatePath='" + certificatePath + '\'' +                ", certificatePassword='" + certificatePassword + '\'' +                '}';    }}