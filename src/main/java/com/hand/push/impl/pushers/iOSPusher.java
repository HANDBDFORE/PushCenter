package com.hand.push.impl.pushers;import com.hand.push.core.LogUtil;import com.hand.push.core.Pusher;import com.hand.push.core.annotation.Platform;import com.hand.push.core.domain.NodeResult;import com.hand.push.dto.PushEntry;import javapns.communication.exceptions.CommunicationException;import javapns.devices.Device;import javapns.devices.implementations.basic.BasicDevice;import javapns.notification.AppleNotificationServerBasicImpl;import javapns.notification.PushNotificationManager;import javapns.notification.PushNotificationPayload;import javapns.notification.PushedNotification;import org.slf4j.Logger;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.concurrent.Callable;import java.util.concurrent.FutureTask;@Platform(platformName = "iphone")public final class iOSPusher implements Pusher {    private static final String SOUND = "default";    private final String certificatePath;    private final String certificatePassword;    private final boolean isProduct;   // true：表示的是产品发布推送服务 false：表示的是产品测试推送服务    public iOSPusher(String certificatePath, String certificatePassword, boolean isProduct) {        check(certificatePath, certificatePassword);        this.certificatePath = certificatePath;        this.certificatePassword = certificatePassword;        this.isProduct = isProduct;    }    private void check(String certificatePath, String certificatePassword) {        if (certificatePath == null) throw new IllegalArgumentException("iOSPusher 的 certificatePath 属性必须赋值");        if (certificatePassword == null) throw new IllegalArgumentException("iOSPusher 的 certificatePassword 属性必须赋值");    }    @Override    public String tellMeYourDeviceType() {        return "iphone";    }    @Override    public NodeResult push(List<PushEntry> pushRequests) {        getLogger().debug(getClass() + " called");        NodeResult result = new NodeResult();        URL classPath = getClass().getClassLoader().getResource("");        String path = classPath.getPath() + certificatePath;        getLogger().trace("Full certificatePath: "+ path);        PushNotificationManager pushManager = new PushNotificationManager();        try {            pushManager.initializeConnection(new AppleNotificationServerBasicImpl(path, certificatePassword, isProduct));            List<FutureTask<NodeResult>> tasks = new ArrayList<FutureTask<NodeResult>>(pushRequests.size());            //并发推送            for (PushEntry pushRequest : pushRequests) {                FutureTask<NodeResult> task = putRecord(pushRequest, pushManager);                tasks.add(task);                new Thread(task).start();            }            //获取结果            for (FutureTask<NodeResult> task : tasks) {                try {                    //获取执行结果                    NodeResult pushResult = task.get();                    //如果有错，添加到错误列表                    if (pushResult.hasError())                        result.addErrors(pushResult.getErrorList());                } catch (Exception e) {                    //未知异常                    e.printStackTrace();                    result.addError(e.getMessage(), pushRequests);                }            }        } catch (Exception e) {            e.printStackTrace();            result.addError(e.getMessage(), pushRequests);        } finally {            try {                pushManager.stopConnection();            } catch (Exception e) {                pushManager = null;            }        }        return result;    }    private FutureTask<NodeResult> putRecord(final PushEntry ut, final PushNotificationManager pushManager) {        return new FutureTask<NodeResult>(new Callable<NodeResult>() {            @Override            public NodeResult call() throws Exception {                final NodeResult pushResult = NodeResult.success();                try {                    String alert = ut.getMessage();                    int badge = ut.getCount();                    PushNotificationPayload payLoad = new PushNotificationPayload(alert, badge, SOUND);                    // 发送push消息                    Device device = new BasicDevice();                    device.setToken(ut.getToken());                    PushedNotification notification = pushManager.sendNotification(device, payLoad, true);                    List<PushedNotification> notifications = new ArrayList<PushedNotification>();                    notifications.add(notification);                    List<PushedNotification> successfulNotifications = PushedNotification .findSuccessfulNotifications(notifications);                    for (PushedNotification successfulNotification : successfulNotifications) {                        getLogger().trace("success: "+ut);                    }                    List<PushedNotification> failedNotifications = PushedNotification .findFailedNotifications(notifications);                    for (PushedNotification failedNotification : failedNotifications) {                        getLogger().error("error! Caused by: "+failedNotification.getException()+ ", data: "+ut);                        pushResult.addError(failedNotification.getException().getMessage(), ut);                    }                } catch (CommunicationException e) {                    e.printStackTrace();                    //TODO 可以考虑转换为IOException，包装在结果里                    getLogger().error("error! Caused by: "+e);                    pushResult.addError(e.getMessage(),ut);                } catch (Exception e) {                    getLogger().error("error! Caused by: "+e);                    e.printStackTrace();                    pushResult.addError(e.getMessage(),ut);                }                return pushResult;            }        });    }    private Logger getLogger() {        return LogUtil.getThreadSafeCoreLogger();    }    @Override    public String toString() {        return "iOSPusher{" +                "certificatePath='" + certificatePath + '\'' +                ", certificatePassword='" + certificatePassword + '\'' +                '}';    }}